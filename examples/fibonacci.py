"""
Fibonacci Example

This example calculates the first 10 Fibonacci numbers using the stack-based VM.
It demonstrates loops, conditionals, and function calls.
"""

from stackvm import VM, CodeGenerator

def main():
    # Create a new VM and code generator
    vm = VM()
    gen = CodeGenerator()
    
    # Memory layout:
    # 0: n (input parameter, will be 10)
    # 1: a (first Fibonacci number)
    # 2: b (second Fibonacci number)
    # 3: counter
    # 4: temp storage
    
    # Main program
    (
        gen
        # Initialize n = 10 (number of Fibonacci numbers to generate)
        .push(10)
        .store(0)  # n = 10
        
        # Initialize a = 0, b = 1
        .push(0)
        .store(1)  # a = 0
        .push(1)
        .store(2)  # b = 1
        
        # Initialize counter = 0
        .push(0)
        .store(3)  # counter = 0
        
        # Print header
        .push(0x0A)  # Newline
        .print_()
        .push(ord('F'))
        .print_()
        .push(ord('i'))
        .print_()
        .push(ord('b'))
        .print_()
        .push(ord('o'))
        .print_()
        .push(ord('n'))
        .print_()
        .push(ord('a'))
        .print_()
        .push(ord('c'))
        .print_()
        .push(ord('c'))
        .print_()
        .push(ord('i'))
        .print_()
        .push(ord(' ')) 
        .print_()
        .push(ord('S'))
        .print_()
        .push(ord('e'))
        .print_()
        .push(ord('q'))
        .print_()
        .push(ord('u'))
        .print_()
        .push(ord('e'))
        .print_()
        .push(ord('n'))
        .print_()
        .push(ord('c'))
        .print_()
        .push(ord('e'))
        .print_()
        .push(ord(':'))
        .print_()
        .push(0x0A)  # Newline
        .print_()
        
        # Print the first two numbers (0 and 1)
        .load(1)     # Load a
        .print_()    # Print a
        .push(ord(' '))
        .print_()
        
        .load(2)     # Load b
        .print_()    # Print b
        .push(ord(' '))
        .print_()
        
        # Main loop
        .label('loop')
        
        # Check if counter < n-2
        .load(3)     # Load counter
        .load(0)     # Load n
        .push(2)
        .sub()       # n-2
        .lt()        # counter < n-2?
        .jump_if_zero('end')
        
        # Calculate next Fibonacci number: c = a + b
        .load(1)     # Load a
        .load(2)     # Load b
        .add()       # a + b
        .store(4)    # Store in temp
        
        # Print the result
        .load(4)
        .print_()
        .push(ord(' '))
        .print_()
        
        # Update a and b: a = b, b = c
        .load(2)     # Load b
        .store(1)    # a = b
        .load(4)     # Load c (from temp)
        .store(2)    # b = c
        
        # Increment counter
        .load(3)     # Load counter
        .push(1)
        .add()       # counter + 1
        .store(3)    # Store counter
        
        # Jump back to start of loop
        .jump('loop')
        
        # End of program
        .label('end')
        .push(0x0A)  # Newline
        .print_()
        .halt()
    )
    
    # Get the generated bytecode
    bytecode = gen.generate()
    
    # Print the disassembled program
    print("Generated program:")
    print(gen.dump())
    print("\nExecuting program...\n")
    
    # Run the program
    vm.execute(bytecode)

if __name__ == "__main__":
    main()
